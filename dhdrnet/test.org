#+TITLE: Test Tables and such
#+PROPERTY: header-args :session /jpy::2cb39fd3-a8f7-4c79-9942-1187fed51c1c :async yes

#+BEGIN_SRC jupyter-python
import pandas as pd
import numpy as np

from dhdrnet.util import DATA_DIR, ROOT_DIR

print(DATA_DIR)
#+END_SRC

#+RESULTS:
: /home/shane/Development/DHDRNet/data

#+BEGIN_SRC jupyter-python
  from dhdrnet.Dataset import LUTDataset

  test_data = LUTDataset(
      df=pd.read_csv(ROOT_DIR / "precomputed_data" / "store_current.csv"),
      exposure_path=DATA_DIR / "correct_exposures" / "exposures",
      raw_dir=DATA_DIR / "dngs",
      name_list=ROOT_DIR / "precomputed_data" / "test_current.csv",
  )
  test_data.data["mse"]
#+END_SRC

#+RESULTS:
#+begin_example
ev                              -3.00        -2.75        -2.50        -2.25  \
0006_20160721_170707_736  1564.444742  1620.747432  1666.827206  1694.827552
0006_20160721_175239_909  4833.678364  4931.049788  5023.474798  5096.684604
0006_20160721_181525_062  4030.755679  4099.319882  4154.594938  4191.564140
0006_20160722_100126_028  3096.586446  3195.740610  3285.280822  3355.353795
0006_20160722_100951_201   256.802163   291.744275   325.948450   357.335873
...                               ...          ...          ...          ...
c483_20150901_173210_443   396.788974   414.150080   424.499389   421.893856
c483_20150901_194029_165  4089.551454  4099.503758  4076.524716  4038.705294
c483_20150901_195108_436  3136.258062  3158.604146  3150.862320  3122.928498
c483_20150901_214630_530  5143.751095  5265.341578  5354.983200  5412.049453
c483_20150901_221141_886  7165.308185  7285.930914  7377.103449  7451.839310

ev                              -2.00        -1.75        -1.50        -1.25  \
0006_20160721_170707_736  1703.434451  1598.156467  1594.859254  1543.512098
0006_20160721_175239_909  5149.722950  5132.641241  5127.621899  5039.689928
0006_20160721_181525_062  4196.336224  4112.124243  4107.827877  4003.839777
0006_20160722_100126_028  3393.217263  3398.260426  3304.577579  3260.788758
0006_20160722_100951_201   380.441056   381.866729   382.741421   353.604755
...                               ...          ...          ...          ...
c483_20150901_173210_443   407.417568   341.777813   338.061688   290.665286
c483_20150901_194029_165  3962.634683  3856.468872  3444.100464  3442.939489
c483_20150901_195108_436  3074.531499  2977.176778  2857.079921  2593.799426
c483_20150901_214630_530  5419.047871  5384.352295  5297.645468  5154.911430
c483_20150901_221141_886  7482.942462  7485.706860  7433.829155  7331.016986

ev                              -1.00        -0.75  ...        3.75  \
0006_20160721_170707_736  1416.238552  1255.256251  ...  204.894840
0006_20160721_175239_909  4886.487238  4668.281993  ...   97.861535
0006_20160721_181525_062  3848.204339  3646.137740  ...  161.401949
0006_20160722_100126_028  3106.662492  2886.394583  ...  112.903301
0006_20160722_100951_201   303.291687   235.769308  ...  127.675286
...                               ...          ...  ...         ...
c483_20150901_173210_443   244.182324   212.416530  ...  491.562211
c483_20150901_194029_165  3363.027961  3164.719363  ...  423.285114
c483_20150901_195108_436  2534.649179  2345.410856  ...  710.151501
c483_20150901_214630_530  4959.021309  4355.826203  ...  223.605843
c483_20150901_221141_886  7160.985082  6919.238193  ...  115.567154

ev                              4.00        4.25        4.50         4.75  \
0006_20160721_170707_736  266.079117  342.824356  417.325202   479.171636
0006_20160721_175239_909  113.651506  189.986430  380.395532   683.621096
0006_20160721_181525_062  151.508049  161.296966  195.781336   260.689689
0006_20160722_100126_028  191.805441  321.521480  509.792787   743.946110
0006_20160722_100951_201  125.941866  127.301245  130.924251   137.018390
...                              ...         ...         ...          ...
c483_20150901_173210_443  453.472541  421.067826  395.365695   378.447954
c483_20150901_194029_165  436.143826  508.054026  622.056752   736.905143
c483_20150901_195108_436  887.286390  958.044685  879.829818   679.485625
c483_20150901_214630_530  387.514681  640.342330  992.222301  1392.208206
c483_20150901_221141_886  141.445638  199.326865  296.079572   443.858023

ev                               5.00         5.25         5.50         5.75  \
0006_20160721_170707_736   532.625834   578.215898   594.875969   604.528252
0006_20160721_175239_909  1032.792516  1373.295946  1692.185380  2001.375581
0006_20160721_181525_062   375.625099   563.947176   832.124956  1191.846109
0006_20160722_100126_028  1008.343893  1273.946062  1511.891965  1682.150097
0006_20160722_100951_201   141.826089   140.471864   132.713468   122.435351
...                               ...          ...          ...          ...
c483_20150901_173210_443   369.290419   363.885802   362.037312   360.937986
c483_20150901_194029_165   805.029935   810.227433   749.567060   658.229602
c483_20150901_195108_436   496.435131   466.103091   604.858273   860.001265
c483_20150901_214630_530  1807.255907  2194.806341  2532.385886  2805.825094
c483_20150901_221141_886   644.318508   901.812133  1227.618439  1607.817198

ev                               6.00
0006_20160721_170707_736   629.531647
0006_20160721_175239_909  2310.115054
0006_20160721_181525_062  1607.600744
0006_20160722_100126_028  1785.318792
0006_20160722_100951_201   115.151326
...                               ...
c483_20150901_173210_443   359.936870
c483_20150901_194029_165   640.969552
c483_20150901_195108_436  1174.676678
c483_20150901_214630_530  3006.353365
c483_20150901_221141_886  2037.885017

[724 rows x 36 columns]
#+end_example

#+BEGIN_SRC jupyter-python
errors = test_data.data.iloc[0]["mse"]
print(errors.to_numpy())
#+END_SRC

#+RESULTS:
: [1564.44474225 1620.74743187 1666.82720633 1694.82755222 1703.43445062
:  1598.15646716 1594.85925447 1543.51209757 1416.23855163 1255.25625128
:  1065.57599049  857.94804301  473.31568409  336.80012584  251.88101098
:   232.90372869  267.75392563  323.28166661  370.37827512  372.39978134
:   335.06067559  288.83120235  239.24819666  191.73630419  162.03335002
:   167.84276284  204.89483976  266.07911743  342.82435575  417.32520223
:   479.17163606  532.62583388  578.21589823  594.87596859  604.528252
:   629.53164663]
So I believe I just want to minimize the predicted probabilities as they correspond to these errors.

#+BEGIN_SRC jupyter-python
import torch.nn.functional as F
import torch

err_norm = 1 - (errors.to_numpy() / errors.max())
error_probabilities = F.softmax(torch.tensor(err_norm), dim=0).numpy()

mse_prob = pd.DataFrame({"errors": errors, "probabilities": error_probabilities})
mse_prob
#+END_SRC

#+RESULTS:
#+begin_example
            errors  probabilities
ev
-3.00  1564.444742       0.016210
-2.75  1620.747432       0.015683
-2.50  1666.827206       0.015264
-2.25  1694.827552       0.015015
-2.00  1703.434451       0.014940
-1.75  1598.156467       0.015892
-1.50  1594.859254       0.015923
-1.25  1543.512098       0.016410
-1.00  1416.238552       0.017683
-0.75  1255.256251       0.019436
-0.50  1065.575990       0.021725
-0.25   857.948043       0.024542
 0.25   473.315684       0.030759
 0.50   336.800126       0.033325
 0.75   251.881011       0.035028
 1.00   232.903729       0.035421
 1.25   267.753926       0.034704
 1.50   323.281667       0.033591
 1.75   370.378275       0.032675
 2.00   372.399781       0.032636
 2.25   335.060676       0.033359
 2.50   288.831202       0.034277
 2.75   239.248197       0.035289
 3.00   191.736304       0.036287
 3.25   162.033350       0.036926
 3.50   167.842763       0.036800
 3.75   204.894840       0.036008
 4.00   266.079117       0.034738
 4.25   342.824356       0.033207
 4.50   417.325202       0.031786
 4.75   479.171636       0.030653
 5.00   532.625834       0.029706
 5.25   578.215898       0.028921
 5.50   594.875969       0.028640
 5.75   604.528252       0.028478
 6.00   629.531647       0.028063
#+end_example

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
%matplotlib inline

mse_prob["err_normed"] = err_norm
mse_prob.plot(subplots=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: array([<AxesSubplot:xlabel='ev'>, <AxesSubplot:xlabel='ev'>,
:        <AxesSubplot:xlabel='ev'>], dtype=object)
[[file:./.ob-jupyter/9266064c822317dc1550f17f1ca4e75fc78564ec.png]]
:END:
